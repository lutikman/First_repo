# МНОЖИНИ — це неврегульований контейнер, який містить тільки унікальні елементи. У множину можна додавати тільки незмінні типи даних.

empty_set = set() # Щоб створити порожню множину

# Для створення заповненої множини достатньо передати будь-який об'єкт, що ітерується, у функцію set:
a = set('hello')
print(f"set a: {a}")
# Або ж скористатися синтаксисом з фігурними дужками (як у словниках), але елементи у фігурних дужках просто перелічити через кому без двокрапок:
b = {1, 2, 3, 4, 5}
print(f"set b: {b}")
# Унікальність множини передбачає, що якщо множина вже містить такий елемент, то спроба додати ще один такий самий нічого не змінить.
numbers = {2, 1, 3, 1, 2, 3}
print(f"set numbers: {numbers}")

# Нехай у нас є список, з якого треба видалити дублікати
lst = [1, 2, 3, 1, 2, 2, 3, 4, 1] # створюємо список
print(f"set lst: {lst}")
# Це можна зробити, перетворивши список у множину
d_lst = set(lst) 
# А далі множину перетворити знову у список
lst = list(d_lst)
print(f"set lst: {lst}")

# add(elem) — метод, який додає елемент у множину
numbers.add(4)
print(f"set numbers after add: {numbers}")

# remove(elem) — метод, який видаляє елемент із множини, викликає виняток, якщо такого елемента немає
numbers.remove(3)
print(f"set numbers after remove 3: {numbers}")

# discard(elem) — метод, який видаляє елемент із множини і не викликає виняток, якщо його немає
numbers.discard(2)
print(f"set numbers after discart 2: {numbers}")

# Математичні операції над множинами
a = {1, 2, 3}
b = {3, 4, 5}

# intersection - Перетин двох множин включає лише ті елементи, які є в обох множинах.
# Щоб знайти загальні елементи для двох множин, над ними треба виконати операцію & або використати метод intersection
print("intersection a and b:", a.intersection(b))
print("intersection a and b:", a & b)

# difference - Різниця між двома множинами включає елементи, які містяться в першій множині, але не містяться в другій
# Можна також використовувати оператор - або метод difference
print("difference a and b:", a.difference(b))  # {1, 2}
print("difference a and b:", a - b)  # {1, 2}

# symmetric_difference - Симетрична різниця між двома множинами включає всі елементи, які містяться в одній множині, але не містяться в іншій, і навпаки.
# Щоб знайти всі елементи з двох множин, окрім загальних, нам необхідно використати оператор ^
print("symmetric_difference a and b:", a.symmetric_difference(b))  # {1, 2, 4, 5}
print("symmetric_difference a and b:", a ^ b)  # {1, 2, 4, 5}

# union - б'єднання двох множин включає всі елементи з обох множин, але без дублікатів.
# Це знаходиться за допомогою оператора | або методу union
print("union a and b:", a.union(b))  # {1, 2, 3, 4, 5}
print("union a and b:", a | b)  # {1, 2, 3, 4, 5}


# Заморожені множини в Python, відомі як frozenset, є подібними до звичайних множин set, але з ключовою відмінністю: вони є незмінними.
# Це означає, що після створення замороженої множини ви не можете додати або видалити елементи з неї.
my_frozenset = frozenset([1, 2, 3, 4, 5])
print(f"frozenset my_frozenset: {my_frozenset}")

# Результатом операці над замороженими множинаби є нові заморожені множини
